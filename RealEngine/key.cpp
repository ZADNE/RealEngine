#include <RealEngine/key.hpp>

#include <SDL\SDL_mouse.h>

namespace RE {

	RKey SDLKToRkey(SDL_Keycode key) {
		switch (key) {
		case SDLK_BACKSPACE:    return RKey::Backspace;
		case SDLK_TAB:          return RKey::Tab;
		case SDLK_RETURN:       return RKey::Return;
		case SDLK_PAUSE:        return RKey::Pause;
		case SDLK_ESCAPE:       return RKey::Escape;
		case SDLK_SPACE:        return RKey::Space;
		case SDLK_COMMA:        return RKey::Comma;
		case SDLK_MINUS:        return RKey::Minus;
		case SDLK_PERIOD:       return RKey::Period;
		case SDLK_SLASH:        return RKey::Slash;
		case SDLK_0:            return RKey::K0;
		case SDLK_1:            return RKey::K1;
		case SDLK_2:            return RKey::K2;
		case SDLK_3:            return RKey::K3;
		case SDLK_4:            return RKey::K4;
		case SDLK_5:            return RKey::K5;
		case SDLK_6:            return RKey::K6;
		case SDLK_7:            return RKey::K7;
		case SDLK_8:            return RKey::K8;
		case SDLK_9:            return RKey::K9;
		case SDLK_COLON:        return RKey::Colon;
		case SDLK_SEMICOLON:    return RKey::Semicolon;
		case SDLK_EQUALS:       return RKey::Equals;
		case SDLK_LEFTBRACKET:  return RKey::LeftBracket;
		case SDLK_BACKSLASH:    return RKey::Backslash;
		case SDLK_RIGHTBRACKET: return RKey::RightBracket;
		case SDLK_a:            return RKey::A;
		case SDLK_b:            return RKey::B;
		case SDLK_c:            return RKey::C;
		case SDLK_d:            return RKey::D;
		case SDLK_e:            return RKey::E;
		case SDLK_f:            return RKey::F;
		case SDLK_g:            return RKey::G;
		case SDLK_h:            return RKey::H;
		case SDLK_i:            return RKey::I;
		case SDLK_j:            return RKey::J;
		case SDLK_k:            return RKey::K;
		case SDLK_l:            return RKey::L;
		case SDLK_m:            return RKey::M;
		case SDLK_n:            return RKey::N;
		case SDLK_o:            return RKey::O;
		case SDLK_p:            return RKey::P;
		case SDLK_q:            return RKey::Q;
		case SDLK_r:            return RKey::R;
		case SDLK_s:            return RKey::S;
		case SDLK_t:            return RKey::T;
		case SDLK_u:            return RKey::U;
		case SDLK_v:            return RKey::V;
		case SDLK_w:            return RKey::W;
		case SDLK_x:            return RKey::X;
		case SDLK_y:            return RKey::Y;
		case SDLK_z:            return RKey::Z;
		case SDLK_DELETE:       return RKey::Delete;
		case SDLK_KP_0:         return RKey::Numpad0;
		case SDLK_KP_1:         return RKey::Numpad1;
		case SDLK_KP_2:         return RKey::Numpad2;
		case SDLK_KP_3:         return RKey::Numpad3;
		case SDLK_KP_4:         return RKey::Numpad4;
		case SDLK_KP_5:         return RKey::Numpad5;
		case SDLK_KP_6:         return RKey::Numpad6;
		case SDLK_KP_7:         return RKey::Numpad7;
		case SDLK_KP_8:         return RKey::Numpad8;
		case SDLK_KP_9:         return RKey::Numpad9;
		case SDLK_KP_PERIOD:    return RKey::Decimal;
		case SDLK_KP_DIVIDE:    return RKey::Divide;
		case SDLK_KP_MULTIPLY:  return RKey::Multiply;
		case SDLK_KP_MINUS:     return RKey::Subtract;
		case SDLK_KP_PLUS:      return RKey::Add;
		case SDLK_KP_ENTER:     return RKey::NumpadEnter;
		case SDLK_KP_EQUALS:    return RKey::NumpadEquals;
		case SDLK_UP:           return RKey::ArrowUp;
		case SDLK_DOWN:         return RKey::ArrowDown;
		case SDLK_RIGHT:        return RKey::ArrowRight;
		case SDLK_LEFT:         return RKey::ArrowLeft;
		case SDLK_INSERT:       return RKey::Insert;
		case SDLK_HOME:         return RKey::Home;
		case SDLK_END:          return RKey::End;
		case SDLK_PAGEUP:       return RKey::PageUp;
		case SDLK_PAGEDOWN:     return RKey::PageDown;
		case SDLK_F1:           return RKey::F1;
		case SDLK_F2:           return RKey::F2;
		case SDLK_F3:           return RKey::F3;
		case SDLK_F4:           return RKey::F4;
		case SDLK_F5:           return RKey::F5;
		case SDLK_F6:           return RKey::F6;
		case SDLK_F7:           return RKey::F7;
		case SDLK_F8:           return RKey::F8;
		case SDLK_F9:           return RKey::F9;
		case SDLK_F10:          return RKey::F10;
		case SDLK_F11:          return RKey::F11;
		case SDLK_F12:          return RKey::F12;
		case SDLK_F13:          return RKey::F13;
		case SDLK_F14:          return RKey::F14;
		case SDLK_F15:          return RKey::F15;
		case SDLK_NUMLOCKCLEAR: return RKey::NumLock;
		case SDLK_SCROLLLOCK:   return RKey::ScrollLock;
		case SDLK_RSHIFT:       return RKey::RShift;
		case SDLK_LSHIFT:       return RKey::LShift;
		case SDLK_RCTRL:        return RKey::RCtrl;
		case SDLK_LCTRL:        return RKey::LCtrl;
		case SDLK_RALT:         return RKey::RAlt;
		case SDLK_LALT:         return RKey::LAlt;
		case SDLK_SYSREQ:       return RKey::SysRq;
		case SDLK_MENU:         return RKey::Menu;
		case SDLK_POWER:        return RKey::Power;
		case SDL_BUTTON_LEFT:   return RKey::LMB;
		case SDL_BUTTON_MIDDLE: return RKey::MMB;
		case SDL_BUTTON_RIGHT:  return RKey::RMB;
		case SDL_BUTTON_X1:     return RKey::X1MB;
		case SDL_BUTTON_X2:     return RKey::X2MB;
		default:                return RKey::UNKNOWN;
		}
	}

	std::string RKeyToString(RKey key) {
		switch (key) {
		case RKey::NO_KEY:		return "NO_KEY";
		case RKey::ANY_KEY:		return "ANY_KEY";
		case RKey::KEY_UNBOUND:	return "KEY_UNBOUND";
		case RKey::Backspace:   return "Backspace";
		case RKey::Tab:         return "Tab";
		case RKey::Return:      return "Return";
		case RKey::Pause:       return "Pause";
		case RKey::Escape:      return "Escape";
		case RKey::Space:       return "Space";
		case RKey::Comma:       return "Comma";
		case RKey::Minus:       return "Minus";
		case RKey::Period:      return "Period";
		case RKey::Slash:       return "Slash";
		case RKey::K0:          return "K0";
		case RKey::K1:          return "K1";
		case RKey::K2:          return "K2";
		case RKey::K3:          return "K3";
		case RKey::K4:          return "K4";
		case RKey::K5:          return "K5";
		case RKey::K6:          return "K6";
		case RKey::K7:          return "K7";
		case RKey::K8:          return "K8";
		case RKey::K9:          return "K9";
		case RKey::Colon:       return "Colon";
		case RKey::Semicolon:   return "Semicolon";
		case RKey::Equals:      return "Equals";
		case RKey::LeftBracket: return "LeftBracket";
		case RKey::Backslash:   return "Backslash";
		case RKey::RightBracket:return "RightBracket";
		case RKey::A:           return "A";
		case RKey::B:           return "B";
		case RKey::C:           return "C";
		case RKey::D:           return "D";
		case RKey::E:           return "E";
		case RKey::F:           return "F";
		case RKey::G:           return "G";
		case RKey::H:           return "H";
		case RKey::I:           return "I";
		case RKey::J:           return "J";
		case RKey::K:           return "K";
		case RKey::L:           return "L";
		case RKey::M:           return "M";
		case RKey::N:           return "N";
		case RKey::O:           return "O";
		case RKey::P:           return "P";
		case RKey::Q:           return "Q";
		case RKey::R:           return "R";
		case RKey::S:           return "S";
		case RKey::T:           return "T";
		case RKey::U:           return "U";
		case RKey::V:           return "V";
		case RKey::W:           return "W";
		case RKey::X:           return "X";
		case RKey::Y:           return "Y";
		case RKey::Z:           return "Z";
		case RKey::Delete:      return "Delete";
		case RKey::Numpad0:     return "Numpad0";
		case RKey::Numpad1:     return "Numpad1";
		case RKey::Numpad2:     return "Numpad2";
		case RKey::Numpad3:     return "Numpad3";
		case RKey::Numpad4:     return "Numpad4";
		case RKey::Numpad5:     return "Numpad5";
		case RKey::Numpad6:     return "Numpad6";
		case RKey::Numpad7:     return "Numpad7";
		case RKey::Numpad8:     return "Numpad8";
		case RKey::Numpad9:     return "Numpad9";
		case RKey::Decimal:     return "Decimal";
		case RKey::Divide:      return "Divide";
		case RKey::Multiply:    return "Multiply";
		case RKey::Subtract:    return "Subtract";
		case RKey::Add:         return "Add";
		case RKey::NumpadEnter: return "NumpadEnter";
		case RKey::NumpadEquals:return "NumpadEquals";
		case RKey::ArrowUp:     return "ArrowUp";
		case RKey::ArrowDown:   return "ArrowDown";
		case RKey::ArrowRight:  return "ArrowRight";
		case RKey::ArrowLeft:   return "ArrowLeft";
		case RKey::Insert:      return "Insert";
		case RKey::Home:        return "Home";
		case RKey::End:         return "End";
		case RKey::PageUp:      return "PageUp";
		case RKey::PageDown:    return "PageDown";
		case RKey::F1:          return "F1";
		case RKey::F2:          return "F2";
		case RKey::F3:          return "F3";
		case RKey::F4:          return "F4";
		case RKey::F5:          return "F5";
		case RKey::F6:          return "F6";
		case RKey::F7:          return "F7";
		case RKey::F8:          return "F8";
		case RKey::F9:          return "F9";
		case RKey::F10:         return "F10";
		case RKey::F11:         return "F11";
		case RKey::F12:         return "F12";
		case RKey::F13:         return "F13";
		case RKey::F14:         return "F14";
		case RKey::F15:         return "F15";
		case RKey::NumLock:     return "NumLock";
		case RKey::ScrollLock:  return "ScrollLock";
		case RKey::RShift:      return "RShift";
		case RKey::LShift:      return "LShift";
		case RKey::RCtrl:       return "RCtrl";
		case RKey::LCtrl:       return "LCtrl";
		case RKey::RAlt:        return "RAlt";
		case RKey::LAlt:        return "LAlt";
		case RKey::SysRq:       return "SysRq";
		case RKey::Menu:        return "Menu";
		case RKey::Power:       return "Power";
		case RKey::LMB:         return "LMB";
		case RKey::MMB:         return "MMB";
		case RKey::RMB:         return "RMB";
		case RKey::X1MB:        return "X1MB";
		case RKey::X2MB:        return "X2MB";
		case RKey::UMW:         return "UMW";
		case RKey::DMW:         return "DMW";
		case RKey::LMW:         return "LMW";
		case RKey::RMW:         return "RMW";
		default:                return "UNKNOWN";
		}
	}

	uint64_t constexpr mix(char m, uint64_t s) {
		return ((s << 7) + ~(s >> 3)) + ~m;
	}

	uint64_t constexpr hash(const char* m) {
		return (*m) ? mix(*m, hash(m + 1)) : 0;
	}

	RKey stringToRKey(const std::string& string) {
		switch (hash(string.c_str())) {
		case hash("NO_KEY"):      return RKey::NO_KEY;
		case hash("ANY_KEY"):     return RKey::ANY_KEY;
		case hash("KEY_UNBOUND"): return RKey::KEY_UNBOUND;
		case hash("Backspace"):   return RKey::Backspace;
		case hash("Tab"):         return RKey::Tab;
		case hash("Return"):      return RKey::Return;
		case hash("Pause"):       return RKey::Pause;
		case hash("Escape"):      return RKey::Escape;
		case hash("Space"):       return RKey::Space;
		case hash("Comma"):       return RKey::Comma;
		case hash("Minus"):       return RKey::Minus;
		case hash("Period"):      return RKey::Period;
		case hash("Slash"):       return RKey::Slash;
		case hash("K0"):          return RKey::K0;
		case hash("K1"):          return RKey::K1;
		case hash("K2"):          return RKey::K2;
		case hash("K3"):          return RKey::K3;
		case hash("K4"):          return RKey::K4;
		case hash("K5"):          return RKey::K5;
		case hash("K6"):          return RKey::K6;
		case hash("K7"):          return RKey::K7;
		case hash("K8"):          return RKey::K8;
		case hash("K9"):          return RKey::K9;
		case hash("Colon"):       return RKey::Colon;
		case hash("Semicolon"):   return RKey::Semicolon;
		case hash("Equals"):      return RKey::Equals;
		case hash("LeftBracket"): return RKey::LeftBracket;
		case hash("Backslash"):   return RKey::Backslash;
		case hash("RightBracket"):return RKey::RightBracket;
		case hash("A"):           return RKey::A;
		case hash("B"):           return RKey::B;
		case hash("C"):           return RKey::C;
		case hash("D"):           return RKey::D;
		case hash("E"):           return RKey::E;
		case hash("F"):           return RKey::F;
		case hash("G"):           return RKey::G;
		case hash("H"):           return RKey::H;
		case hash("I"):           return RKey::I;
		case hash("J"):           return RKey::J;
		case hash("K"):           return RKey::K;
		case hash("L"):           return RKey::L;
		case hash("M"):           return RKey::M;
		case hash("N"):           return RKey::N;
		case hash("O"):           return RKey::O;
		case hash("P"):           return RKey::P;
		case hash("Q"):           return RKey::Q;
		case hash("R"):           return RKey::R;
		case hash("S"):           return RKey::S;
		case hash("T"):           return RKey::T;
		case hash("U"):           return RKey::U;
		case hash("V"):           return RKey::V;
		case hash("W"):           return RKey::W;
		case hash("X"):           return RKey::X;
		case hash("Y"):           return RKey::Y;
		case hash("Z"):           return RKey::Z;
		case hash("Delete"):      return RKey::Delete;
		case hash("Numpad0"):     return RKey::Numpad0;
		case hash("Numpad1"):     return RKey::Numpad1;
		case hash("Numpad2"):     return RKey::Numpad2;
		case hash("Numpad3"):     return RKey::Numpad3;
		case hash("Numpad4"):     return RKey::Numpad4;
		case hash("Numpad5"):     return RKey::Numpad5;
		case hash("Numpad6"):     return RKey::Numpad6;
		case hash("Numpad7"):     return RKey::Numpad7;
		case hash("Numpad8"):     return RKey::Numpad8;
		case hash("Numpad9"):     return RKey::Numpad9;
		case hash("Decimal"):     return RKey::Decimal;
		case hash("Divide"):      return RKey::Divide;
		case hash("Multiply"):    return RKey::Multiply;
		case hash("Subtract"):    return RKey::Subtract;
		case hash("Add"):         return RKey::Add;
		case hash("NumpadEnter"): return RKey::NumpadEnter;
		case hash("NumpadEquals"):return RKey::NumpadEquals;
		case hash("ArrowUp"):     return RKey::ArrowUp;
		case hash("ArrowDown"):   return RKey::ArrowDown;
		case hash("ArrowRight"):  return RKey::ArrowRight;
		case hash("ArrowLeft"):   return RKey::ArrowLeft;
		case hash("Insert"):      return RKey::Insert;
		case hash("Home"):        return RKey::Home;
		case hash("End"):         return RKey::End;
		case hash("PageUp"):      return RKey::PageUp;
		case hash("PageDown"):    return RKey::PageDown;
		case hash("F1"):          return RKey::F1;
		case hash("F2"):          return RKey::F2;
		case hash("F3"):          return RKey::F3;
		case hash("F4"):          return RKey::F4;
		case hash("F5"):          return RKey::F5;
		case hash("F6"):          return RKey::F6;
		case hash("F7"):          return RKey::F7;
		case hash("F8"):          return RKey::F8;
		case hash("F9"):          return RKey::F9;
		case hash("F10"):         return RKey::F10;
		case hash("F11"):         return RKey::F11;
		case hash("F12"):         return RKey::F12;
		case hash("F13"):         return RKey::F13;
		case hash("F14"):         return RKey::F14;
		case hash("F15"):         return RKey::F15;
		case hash("NumLock"):     return RKey::NumLock;
		case hash("ScrollLock"):  return RKey::ScrollLock;
		case hash("RShift"):      return RKey::RShift;
		case hash("LShift"):      return RKey::LShift;
		case hash("RCtrl"):       return RKey::RCtrl;
		case hash("LCtrl"):       return RKey::LCtrl;
		case hash("RAlt"):        return RKey::RAlt;
		case hash("LAlt"):        return RKey::LAlt;
		case hash("SysRq"):       return RKey::SysRq;
		case hash("Menu"):        return RKey::Menu;
		case hash("Power"):       return RKey::Power;
		case hash("LMB"):         return RKey::LMB;
		case hash("MMB"):         return RKey::MMB;
		case hash("RMB"):         return RKey::RMB;
		case hash("X1MB"):        return RKey::X1MB;
		case hash("X2MB"):        return RKey::X2MB;
		case hash("UMW"):         return RKey::UMW;
		case hash("DMW"):         return RKey::DMW;
		case hash("LMW"):         return RKey::LMW;
		case hash("RMW"):         return RKey::RMW;
		default:                  return RKey::UNKNOWN;
		}
	}

}